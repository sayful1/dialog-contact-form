{"version":3,"sources":["webpack:///form.min.js","webpack:///./assets/js/public/form.js","webpack:///./assets/js/public/modal.js"],"names":["webpackJsonp","22","module","exports","__webpack_require__","23","_typeof","Symbol","iterator","obj","constructor","prototype","settings","window","DialogContactForm","ajaxurl","nonce","selector","fieldClass","errorClass","loadingClass","submitBtnClass","invalid_required","required_select","required_select_multi","required_checkbox","invalid_email","invalid_url","invalid_too_short","invalid_too_long","pattern_mismatch","bad_input","step_mismatch","number_too_large","number_too_small","generic_error","Element","matches","msMatchesSelector","webkitMatchesSelector","closest","s","el","this","document","documentElement","contains","parentElement","getClassName","className","replace","hasError","field","localSettings","disabled","type","validity","valid","valueMissing","typeMismatch","tooShort","getAttribute","value","length","tooLong","badInput","stepMismatch","rangeOverflow","rangeUnderflow","patternMismatch","hasAttribute","showError","error","classList","add","name","group","getElementsByName","i","form","id","message","querySelector","createElement","label","parentNode","insertBefore","nextSibling","setAttribute","innerHTML","style","display","visibility","removeError","remove","removeAttribute","blurHandler","event","target","clickHandler","showServerError","errors","vMessages","field_name","fields","control","messages","validation","hasOwnProperty","insertAdjacentHTML","removeAllErrors","helpText","querySelectorAll","removeChild","allFields","isURL","str","RegExp","test","submitHandler","preventDefault","hasErrors","elements","focus","dcfSuccess","submitBtn","formData","FormData","append","request","XMLHttpRequest","addEventListener","action","xhr","response","JSON","parse","responseText","actions","status","reset_form","reset","setTimeout","url","location","href","open","send","24","modal","modals","dismiss","Array","forEach","call","closestModal"],"mappings":"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","file":"form.min.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 22:\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(23);\nmodule.exports = __webpack_require__(24);\n\n\n/***/ }),\n\n/***/ 23:\n/***/ (function(module, exports) {\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * Element.classList.add();\n */\n(function () {\n    'use strict';\n\n    var settings = window.DialogContactForm || {\n        ajaxurl: '/wp-admin/admin-ajax.php',\n        nonce: '',\n        // Classes and Selectors\n        selector: '.dcf-form',\n        fieldClass: '.dcf-has-error',\n        errorClass: '.dcf-error-message',\n        loadingClass: '.is-loading',\n        submitBtnClass: '.dcf-submit',\n\n        // Messages\n        invalid_required: 'Please fill out this field.',\n        required_select: 'Please select a value.',\n        required_select_multi: 'Please select at least one value.',\n        required_checkbox: 'Please check this field.',\n        invalid_email: 'Please enter an email address.',\n        invalid_url: 'Please enter a URL.',\n        invalid_too_short: 'Please lengthen this text to {minLength} characters or more. ' + 'You are currently using {length} characters.',\n        invalid_too_long: 'Please shorten this text to no more than {maxLength} characters. ' + 'You are currently using {length} characters.',\n        pattern_mismatch: 'Please match the requested format.',\n        bad_input: 'Please enter a number.',\n        step_mismatch: 'Please select a valid value.',\n        number_too_large: 'Please select a value that is no more than {max}.',\n        number_too_small: 'Please select a value that is no less than {min}.',\n        generic_error: 'The value you entered for this field is invalid.'\n    };\n\n    if (!Element.prototype.matches) {\n        Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n    }\n\n    /**\n     * Polyfill for browsers that do not support Element.closest(), but\n     * carry support for element.matches() (or a prefixed equivalent, meaning IE9+)\n     */\n    if (!Element.prototype.closest) {\n        Element.prototype.closest = function (s) {\n            var el = this;\n            if (!document.documentElement.contains(el)) return null;\n            do {\n                if (el.matches(s)) return el;\n                el = el.parentElement;\n            } while (el !== null);\n            return null;\n        };\n    }\n\n    var getClassName = function getClassName(className) {\n        return className.replace('.', '').replace('#', '');\n    };\n\n    /**\n     * Validate the field\n     * @param field\n     * @returns {string}\n     */\n    var hasError = function hasError(field) {\n\n        // Merge user options with existing settings or defaults\n        var localSettings = settings;\n\n        // Don't validate file and disabled fields\n        if (field.disabled || field.type === 'file') return;\n\n        // Don't validate submits, buttons and reset inputs fields\n        if (field.type === 'reset' || field.type === 'submit' || field.type === 'button') return;\n\n        // Get validity\n        var validity = field.validity;\n\n        // If valid, return null\n        if (validity.valid) return;\n\n        // If field is required and empty\n        // if (validity.valueMissing) return 'Please fill out this field.';\n        if (validity.valueMissing) {\n            if (field.type === 'select-multiple') return localSettings.required_select_multi;\n            if (field.type === 'select-one') return localSettings.required_select;\n            if (field.type === 'radio') return localSettings.required_select;\n            if (field.type === 'checkbox') return localSettings.required_checkbox;\n            return localSettings.invalid_required;\n        }\n\n        // If not the right type\n        if (validity.typeMismatch) {\n\n            // Email\n            if (field.type === 'email') return localSettings.invalid_email;\n\n            // URL\n            if (field.type === 'url') return localSettings.invalid_url;\n        }\n\n        // If too short\n        if (validity.tooShort) return localSettings.invalid_too_short.replace('{minLength}', field.getAttribute('minLength')).replace('{length}', field.value.length);\n\n        // If too long\n        if (validity.tooLong) return localSettings.invalid_too_long.replace('{minLength}', field.getAttribute('maxLength')).replace('{length}', field.value.length);\n\n        // If number input isn't a number\n        if (validity.badInput) return localSettings.bad_input;\n\n        // If a number value doesn't match the step interval\n        if (validity.stepMismatch) return localSettings.step_mismatch;\n\n        // If a number field is over the max\n        if (validity.rangeOverflow) return localSettings.number_too_large.replace('{max}', field.getAttribute('max'));\n\n        // If a number field is below the min\n        if (validity.rangeUnderflow) return localSettings.number_too_small.replace('{min}', field.getAttribute('min'));\n\n        // If pattern doesn't match\n        if (validity.patternMismatch) {\n\n            // If pattern info is included, return custom error\n            if (field.hasAttribute('title')) return field.getAttribute('title');\n\n            // Otherwise, generic error\n            return localSettings.pattern_mismatch;\n        }\n\n        // If all else fails, return a generic catchall error\n        return localSettings.generic_error;\n    };\n\n    /**\n     * Show an error message\n     *\n     * @param field\n     * @param error\n     */\n    var showError = function showError(field, error) {\n\n        // Merge user options with existing settings or defaults\n        var localSettings = settings,\n            fieldClass = getClassName(localSettings.fieldClass),\n            errorClass = getClassName(localSettings.errorClass);\n\n        // Add error class to field\n        field.classList.add(fieldClass);\n\n        // If the field is a radio button and part of a group, error all and get the last item in the group\n        if ((field.type === 'radio' || field.type === 'checkbox') && field.name) {\n            var group = document.getElementsByName(field.name);\n            if (group.length > 0) {\n                for (var i = 0; i < group.length; i++) {\n                    // Only check fields in current form\n                    if (group[i].form !== field.form) continue;\n                    group[i].classList.add(fieldClass);\n                }\n                field = group[group.length - 1];\n            }\n        }\n\n        // Get field id or name\n        var id = field.id || field.name;\n        if (!id) return;\n\n        // Check if error message field already exists\n        // If not, create one\n        var message = field.form.querySelector('.' + errorClass + '#error-for-' + id);\n        if (!message) {\n            message = document.createElement('div');\n            message.className = errorClass;\n            message.id = 'error-for-' + id;\n\n            // If the field is a radio button or checkbox, insert error after the label\n            var label;\n            if (field.type === 'radio' || field.type === 'checkbox') {\n                label = field.form.querySelector('label[for=\"' + id + '\"]') || field.parentNode;\n                if (label) {\n                    label.parentNode.insertBefore(message, label.nextSibling);\n                }\n            }\n\n            // Otherwise, insert it after the field\n            if (!label) {\n                field.parentNode.insertBefore(message, field.nextSibling);\n            }\n        }\n\n        // Add ARIA role to the field\n        field.setAttribute('aria-describedby', 'error-for-' + id);\n\n        // Update error message\n        message.innerHTML = error;\n\n        // Show error message\n        message.style.display = 'block';\n        message.style.visibility = 'visible';\n    };\n\n    /**\n     * Remove the error message\n     *\n     * @param field\n     */\n    var removeError = function removeError(field) {\n\n        // Merge user options with existing settings or defaults\n        var localSettings = settings,\n            fieldClass = getClassName(localSettings.fieldClass),\n            errorClass = getClassName(localSettings.errorClass);\n\n        // Remove error class to field\n        field.classList.remove(fieldClass);\n\n        // Remove ARIA role from the field\n        field.removeAttribute('aria-describedby');\n\n        // If the field is a radio button and part of a group, remove error from all and get the last item in the group\n        if ((field.type === 'radio' || field.type === 'checkbox') && field.name) {\n            var group = document.getElementsByName(field.name);\n            if (group.length > 0) {\n                for (var i = 0; i < group.length; i++) {\n                    // Only check fields in current form\n                    if (group[i].form !== field.form) continue;\n                    group[i].classList.remove(fieldClass);\n                }\n                field = group[group.length - 1];\n            }\n        }\n\n        // Get field id or name\n        var id = field.id || field.name;\n        if (!id) return;\n\n        // Check if an error message is in the DOM\n        var message = field.form.querySelector('.' + errorClass + '#error-for-' + id + '');\n        if (!message) return;\n\n        // If so, hide it\n        message.innerHTML = '';\n        message.style.display = 'none';\n        message.style.visibility = 'hidden';\n    };\n\n    /**\n     * Check field validity when it loses focus\n     * @private\n     * @param  {Event} event The blur event\n     */\n    var blurHandler = function blurHandler(event) {\n\n        // Only run if the field is in a form to be validated\n        if (!event.target.form || !event.target.form.classList.contains(getClassName(settings.selector))) return;\n\n        // Validate the field\n        var error = hasError(event.target);\n\n        // If there's an error, show it\n        if (error) {\n            showError(event.target, error);\n            return;\n        }\n\n        // Otherwise, remove any existing error message\n        removeError(event.target);\n    };\n\n    /**\n     * Check radio and checkbox field validity when clicked\n     * @private\n     * @param  {Event} event The click event\n     */\n    var clickHandler = function clickHandler(event) {\n\n        // Only run if the field is in a form to be validated\n        if (!event.target.form || !event.target.form.classList.contains(getClassName(settings.selector))) return;\n\n        // Only run if the field is a checkbox or radio\n        var type = event.target.getAttribute('type');\n        if (!(type === 'checkbox' || type === 'radio')) return;\n\n        // Validate the field\n        var error = hasError(event.target);\n\n        // If there's an error, show it\n        if (error) {\n            showError(event.target, error);\n            return;\n        }\n\n        // Otherwise, remove any errors that exist\n        removeError(event.target);\n    };\n\n    var showServerError = function showServerError(form, errors) {\n        var vMessages, field_name, fields, control, messages, error;\n\n        // Get error message and print on error div\n        if (errors.message) {\n            form.querySelector('.dcf-error').innerHTML = '<p>' + errors.message + '</p>';\n        }\n\n        // Loop through all fields and print field error message if any\n        vMessages = errors.validation && _typeof(errors.validation) === 'object' ? errors.validation : {};\n        for (field_name in vMessages) {\n            if (vMessages.hasOwnProperty(field_name)) {\n                fields = form.querySelector('[name=\"' + field_name + '\"]');\n                if (!fields) {\n                    fields = form.querySelector('[name=\"' + field_name + '[]\"]');\n                }\n                control = fields.closest('.dcf-control');\n                messages = vMessages[field_name];\n                if (messages[0]) {\n                    fields.classList.add(getClassName(settings.fieldClass));\n                    error = '<div class=\"' + getClassName(settings.errorClass) + '\">' + messages[0] + '</div>';\n                    control.insertAdjacentHTML('beforeend', error);\n                }\n            }\n        }\n    };\n\n    var removeAllErrors = function removeAllErrors(form) {\n        // Hide success message if any\n        form.querySelector('.dcf-success').innerHTML = '';\n        // Hide error message if any\n        form.querySelector('.dcf-error').innerHTML = '';\n\n        // Hide field help message if any\n        var helpText = form.querySelectorAll('.' + getClassName(settings.errorClass));\n        for (var i = 0; i < helpText.length; i++) {\n            helpText[i].parentNode.removeChild(helpText[i]);\n        }\n\n        // Remove field validation border-color if any\n        var allFields = form.querySelectorAll('.input, .textarea, .select select');\n        for (i = 0; i < allFields.length; i++) {\n            allFields[i].classList.remove(getClassName(settings.fieldClass));\n        }\n    };\n\n    var isURL = function isURL(str) {\n        var pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\n        '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.?)+[a-z]{2,}|' + // domain name\n        '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n        '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n        '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n        '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\n        return pattern.test(str);\n    };\n\n    /**\n     * Check all fields on submit\n     * @private\n     * @param  {Event} event  The submit event\n     */\n    var submitHandler = function submitHandler(event) {\n        'use strict';\n\n        // Only run on forms flagged for validation\n\n        if (!event.target.classList.contains(getClassName(settings.selector))) return;\n\n        // Prevent form from submitting if there are errors or submission is disabled\n        event.preventDefault();\n\n        // Get all of the form elements\n        var fields = event.target.elements;\n\n        // Validate each field\n        // Store the first field with an error to a variable so we can bring it into focus later\n        var hasErrors;\n        for (var i = 0; i < fields.length; i++) {\n            var error = hasError(fields[i]);\n            if (error) {\n                showError(fields[i], error);\n                if (!hasErrors) {\n                    hasErrors = fields[i];\n                }\n            }\n        }\n\n        // If there are errors, focus on first element with error\n        if (hasErrors) {\n            hasErrors.focus();\n            return;\n        }\n\n        var form = event.target,\n            dcfSuccess = form.querySelector('.dcf-success'),\n            submitBtn = form.querySelector('.' + getClassName(settings.submitBtnClass)),\n            loadingClass = getClassName(settings.loadingClass);\n\n        // Add loading class to submit button\n        submitBtn.classList.add(loadingClass);\n\n        removeAllErrors(form);\n\n        // Get form fields data\n        var formData = new FormData(form);\n        // Add action params with form data\n        formData.append('action', 'dcf_submit_form');\n        // Add nonce field with form data\n        // formData.append('_dcf_nonce', settings.nonce);\n\n        var request = new XMLHttpRequest();\n\n        // Define what happens on successful data submission\n        request.addEventListener(\"load\", function (event) {\n            // Remove loading class from submit button\n            submitBtn.classList.remove(loadingClass);\n\n            var action,\n                xhr = event.target,\n                response = JSON.parse(xhr.responseText),\n                actions = response.actions ? response.actions : {};\n\n            if (xhr.status >= 200 && xhr.status < 300) {\n                // Remove form fields value\n                if (response.reset_form) {\n                    form.reset();\n                }\n\n                for (action in actions) {\n                    if (actions.hasOwnProperty(action)) {\n                        // Get success message and print on success div\n                        if ('success_message' === action) {\n                            dcfSuccess.innerHTML = '<p>' + actions[action] + '</p>';\n                        }\n                        if ('redirect' === action && isURL(actions[action])) {\n                            setTimeout(function (url) {\n                                window.location.href = url;\n                            }, 1000, actions[action]);\n                        }\n                    }\n                }\n            } else {\n                showServerError(form, response);\n            }\n        });\n\n        // Set up our request\n        request.open(\"POST\", settings.ajaxurl, true);\n\n        // The data sent is what the user provided in the form\n        request.send(formData);\n    };\n\n    /**\n     * Listen to all events\n     */\n    document.addEventListener('blur', blurHandler, true);\n    document.addEventListener('click', clickHandler, true);\n    document.addEventListener('submit', submitHandler, false);\n})();\n\n/***/ }),\n\n/***/ 24:\n/***/ (function(module, exports) {\n\n(function () {\n    'use strict';\n\n    var target,\n        modal,\n        modals = document.querySelectorAll('[data-toggle=\"modal\"]'),\n        dismiss = document.querySelectorAll('[data-dismiss=\"modal\"]');\n\n    Array.prototype.forEach.call(modals, function (el, i) {\n        el.addEventListener('click', function (event) {\n            event.preventDefault();\n            target = el.getAttribute('data-target');\n            modal = document.querySelector(target);\n            if (!!modal) {\n                modal.classList.add('is-active');\n            }\n        });\n    });\n\n    Array.prototype.forEach.call(dismiss, function (el, i) {\n        el.addEventListener('click', function (event) {\n            event.preventDefault();\n            var closestModal = el.closest('.modal');\n            if (!!closestModal) {\n                closestModal.classList.remove('is-active');\n            }\n        });\n    });\n})();\n\n/***/ })\n\n},[22]);\n\n\n// WEBPACK FOOTER //\n// form.min.js","/**\n * Element.classList.add();\n */\n(function () {\n    'use strict';\n\n    var settings = window.DialogContactForm || {\n        ajaxurl: '/wp-admin/admin-ajax.php',\n        nonce: '',\n        // Classes and Selectors\n        selector: '.dcf-form',\n        fieldClass: '.dcf-has-error',\n        errorClass: '.dcf-error-message',\n        loadingClass: '.is-loading',\n        submitBtnClass: '.dcf-submit',\n\n        // Messages\n        invalid_required: 'Please fill out this field.',\n        required_select: 'Please select a value.',\n        required_select_multi: 'Please select at least one value.',\n        required_checkbox: 'Please check this field.',\n        invalid_email: 'Please enter an email address.',\n        invalid_url: 'Please enter a URL.',\n        invalid_too_short: 'Please lengthen this text to {minLength} characters or more. ' +\n        'You are currently using {length} characters.',\n        invalid_too_long: 'Please shorten this text to no more than {maxLength} characters. ' +\n        'You are currently using {length} characters.',\n        pattern_mismatch: 'Please match the requested format.',\n        bad_input: 'Please enter a number.',\n        step_mismatch: 'Please select a valid value.',\n        number_too_large: 'Please select a value that is no more than {max}.',\n        number_too_small: 'Please select a value that is no less than {min}.',\n        generic_error: 'The value you entered for this field is invalid.',\n    };\n\n    if (!Element.prototype.matches) {\n        Element.prototype.matches = Element.prototype.msMatchesSelector ||\n            Element.prototype.webkitMatchesSelector;\n    }\n\n    /**\n     * Polyfill for browsers that do not support Element.closest(), but\n     * carry support for element.matches() (or a prefixed equivalent, meaning IE9+)\n     */\n    if (!Element.prototype.closest) {\n        Element.prototype.closest = function (s) {\n            var el = this;\n            if (!document.documentElement.contains(el)) return null;\n            do {\n                if (el.matches(s)) return el;\n                el = el.parentElement;\n            } while (el !== null);\n            return null;\n        };\n    }\n\n    var getClassName = function (className) {\n        return className.replace('.', '').replace('#', '');\n    };\n\n    /**\n     * Validate the field\n     * @param field\n     * @returns {string}\n     */\n    var hasError = function (field) {\n\n        // Merge user options with existing settings or defaults\n        var localSettings = settings;\n\n        // Don't validate file and disabled fields\n        if (field.disabled || field.type === 'file') return;\n\n        // Don't validate submits, buttons and reset inputs fields\n        if (field.type === 'reset' || field.type === 'submit' || field.type === 'button') return;\n\n        // Get validity\n        var validity = field.validity;\n\n        // If valid, return null\n        if (validity.valid) return;\n\n        // If field is required and empty\n        // if (validity.valueMissing) return 'Please fill out this field.';\n        if (validity.valueMissing) {\n            if (field.type === 'select-multiple') return localSettings.required_select_multi;\n            if (field.type === 'select-one') return localSettings.required_select;\n            if (field.type === 'radio') return localSettings.required_select;\n            if (field.type === 'checkbox') return localSettings.required_checkbox;\n            return localSettings.invalid_required;\n        }\n\n        // If not the right type\n        if (validity.typeMismatch) {\n\n            // Email\n            if (field.type === 'email') return localSettings.invalid_email;\n\n            // URL\n            if (field.type === 'url') return localSettings.invalid_url;\n\n        }\n\n        // If too short\n        if (validity.tooShort)\n            return localSettings.invalid_too_short\n                .replace('{minLength}', field.getAttribute('minLength')).replace('{length}', field.value.length);\n\n        // If too long\n        if (validity.tooLong) return localSettings.invalid_too_long\n            .replace('{minLength}', field.getAttribute('maxLength')).replace('{length}', field.value.length);\n\n        // If number input isn't a number\n        if (validity.badInput) return localSettings.bad_input;\n\n        // If a number value doesn't match the step interval\n        if (validity.stepMismatch) return localSettings.step_mismatch;\n\n        // If a number field is over the max\n        if (validity.rangeOverflow) return localSettings.number_too_large.replace('{max}', field.getAttribute('max'));\n\n        // If a number field is below the min\n        if (validity.rangeUnderflow) return localSettings.number_too_small.replace('{min}', field.getAttribute('min'));\n\n        // If pattern doesn't match\n        if (validity.patternMismatch) {\n\n            // If pattern info is included, return custom error\n            if (field.hasAttribute('title')) return field.getAttribute('title');\n\n            // Otherwise, generic error\n            return localSettings.pattern_mismatch;\n\n        }\n\n        // If all else fails, return a generic catchall error\n        return localSettings.generic_error;\n\n    };\n\n\n    /**\n     * Show an error message\n     *\n     * @param field\n     * @param error\n     */\n    var showError = function (field, error) {\n\n        // Merge user options with existing settings or defaults\n        var localSettings = settings,\n            fieldClass = getClassName(localSettings.fieldClass),\n            errorClass = getClassName(localSettings.errorClass);\n\n        // Add error class to field\n        field.classList.add(fieldClass);\n\n        // If the field is a radio button and part of a group, error all and get the last item in the group\n        if ((field.type === 'radio' || field.type === 'checkbox') && field.name) {\n            var group = document.getElementsByName(field.name);\n            if (group.length > 0) {\n                for (var i = 0; i < group.length; i++) {\n                    // Only check fields in current form\n                    if (group[i].form !== field.form) continue;\n                    group[i].classList.add(fieldClass);\n                }\n                field = group[group.length - 1];\n            }\n        }\n\n        // Get field id or name\n        var id = field.id || field.name;\n        if (!id) return;\n\n        // Check if error message field already exists\n        // If not, create one\n        var message = field.form.querySelector('.' + errorClass + '#error-for-' + id);\n        if (!message) {\n            message = document.createElement('div');\n            message.className = errorClass;\n            message.id = 'error-for-' + id;\n\n            // If the field is a radio button or checkbox, insert error after the label\n            var label;\n            if (field.type === 'radio' || field.type === 'checkbox') {\n                label = field.form.querySelector('label[for=\"' + id + '\"]') || field.parentNode;\n                if (label) {\n                    label.parentNode.insertBefore(message, label.nextSibling);\n                }\n            }\n\n            // Otherwise, insert it after the field\n            if (!label) {\n                field.parentNode.insertBefore(message, field.nextSibling);\n            }\n\n        }\n\n        // Add ARIA role to the field\n        field.setAttribute('aria-describedby', 'error-for-' + id);\n\n        // Update error message\n        message.innerHTML = error;\n\n        // Show error message\n        message.style.display = 'block';\n        message.style.visibility = 'visible';\n    };\n\n\n    /**\n     * Remove the error message\n     *\n     * @param field\n     */\n    var removeError = function (field) {\n\n        // Merge user options with existing settings or defaults\n        var localSettings = settings,\n            fieldClass = getClassName(localSettings.fieldClass),\n            errorClass = getClassName(localSettings.errorClass);\n\n        // Remove error class to field\n        field.classList.remove(fieldClass);\n\n        // Remove ARIA role from the field\n        field.removeAttribute('aria-describedby');\n\n        // If the field is a radio button and part of a group, remove error from all and get the last item in the group\n        if ((field.type === 'radio' || field.type === 'checkbox') && field.name) {\n            var group = document.getElementsByName(field.name);\n            if (group.length > 0) {\n                for (var i = 0; i < group.length; i++) {\n                    // Only check fields in current form\n                    if (group[i].form !== field.form) continue;\n                    group[i].classList.remove(fieldClass);\n                }\n                field = group[group.length - 1];\n            }\n        }\n\n        // Get field id or name\n        var id = field.id || field.name;\n        if (!id) return;\n\n\n        // Check if an error message is in the DOM\n        var message = field.form.querySelector('.' + errorClass + '#error-for-' + id + '');\n        if (!message) return;\n\n        // If so, hide it\n        message.innerHTML = '';\n        message.style.display = 'none';\n        message.style.visibility = 'hidden';\n    };\n\n    /**\n     * Check field validity when it loses focus\n     * @private\n     * @param  {Event} event The blur event\n     */\n    var blurHandler = function (event) {\n\n        // Only run if the field is in a form to be validated\n        if (!event.target.form || !event.target.form.classList.contains(getClassName(settings.selector))) return;\n\n        // Validate the field\n        var error = hasError(event.target);\n\n        // If there's an error, show it\n        if (error) {\n            showError(event.target, error);\n            return;\n        }\n\n        // Otherwise, remove any existing error message\n        removeError(event.target);\n    };\n\n    /**\n     * Check radio and checkbox field validity when clicked\n     * @private\n     * @param  {Event} event The click event\n     */\n    var clickHandler = function (event) {\n\n        // Only run if the field is in a form to be validated\n        if (!event.target.form || !event.target.form.classList.contains(getClassName(settings.selector))) return;\n\n        // Only run if the field is a checkbox or radio\n        var type = event.target.getAttribute('type');\n        if (!(type === 'checkbox' || type === 'radio')) return;\n\n        // Validate the field\n        var error = hasError(event.target);\n\n        // If there's an error, show it\n        if (error) {\n            showError(event.target, error);\n            return;\n        }\n\n        // Otherwise, remove any errors that exist\n        removeError(event.target);\n\n    };\n\n    var showServerError = function (form, errors) {\n        var vMessages, field_name, fields, control, messages, error;\n\n        // Get error message and print on error div\n        if (errors.message) {\n            form.querySelector('.dcf-error').innerHTML = '<p>' + errors.message + '</p>';\n        }\n\n        // Loop through all fields and print field error message if any\n        vMessages = errors.validation && typeof errors.validation === 'object' ? errors.validation : {};\n        for (field_name in vMessages) {\n            if (vMessages.hasOwnProperty(field_name)) {\n                fields = form.querySelector('[name=\"' + field_name + '\"]');\n                if (!fields) {\n                    fields = form.querySelector('[name=\"' + field_name + '[]\"]');\n                }\n                control = fields.closest('.dcf-control');\n                messages = vMessages[field_name];\n                if (messages[0]) {\n                    fields.classList.add(getClassName(settings.fieldClass));\n                    error = '<div class=\"' + getClassName(settings.errorClass) + '\">' + messages[0] + '</div>';\n                    control.insertAdjacentHTML('beforeend', error);\n                }\n            }\n        }\n    };\n\n    var removeAllErrors = function (form) {\n        // Hide success message if any\n        form.querySelector('.dcf-success').innerHTML = '';\n        // Hide error message if any\n        form.querySelector('.dcf-error').innerHTML = '';\n\n        // Hide field help message if any\n        var helpText = form.querySelectorAll('.' + getClassName(settings.errorClass));\n        for (var i = 0; i < helpText.length; i++) {\n            helpText[i].parentNode.removeChild(helpText[i]);\n        }\n\n        // Remove field validation border-color if any\n        var allFields = form.querySelectorAll('.input, .textarea, .select select');\n        for (i = 0; i < allFields.length; i++) {\n            allFields[i].classList.remove(getClassName(settings.fieldClass));\n        }\n    };\n\n    var isURL = function (str) {\n        var pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\n            '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.?)+[a-z]{2,}|' + // domain name\n            '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n            '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n            '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n            '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\n        return pattern.test(str);\n    };\n\n    /**\n     * Check all fields on submit\n     * @private\n     * @param  {Event} event  The submit event\n     */\n    var submitHandler = function (event) {\n        'use strict';\n\n        // Only run on forms flagged for validation\n        if (!event.target.classList.contains(getClassName(settings.selector))) return;\n\n        // Prevent form from submitting if there are errors or submission is disabled\n        event.preventDefault();\n\n        // Get all of the form elements\n        var fields = event.target.elements;\n\n        // Validate each field\n        // Store the first field with an error to a variable so we can bring it into focus later\n        var hasErrors;\n        for (var i = 0; i < fields.length; i++) {\n            var error = hasError(fields[i]);\n            if (error) {\n                showError(fields[i], error);\n                if (!hasErrors) {\n                    hasErrors = fields[i];\n                }\n            }\n        }\n\n        // If there are errors, focus on first element with error\n        if (hasErrors) {\n            hasErrors.focus();\n            return;\n        }\n\n        var form = event.target,\n            dcfSuccess = form.querySelector('.dcf-success'),\n            submitBtn = form.querySelector('.' + getClassName(settings.submitBtnClass)),\n            loadingClass = getClassName(settings.loadingClass);\n\n        // Add loading class to submit button\n        submitBtn.classList.add(loadingClass);\n\n        removeAllErrors(form);\n\n        // Get form fields data\n        var formData = new FormData(form);\n        // Add action params with form data\n        formData.append('action', 'dcf_submit_form');\n        // Add nonce field with form data\n        // formData.append('_dcf_nonce', settings.nonce);\n\n        var request = new XMLHttpRequest();\n\n        // Define what happens on successful data submission\n        request.addEventListener(\"load\", function (event) {\n            // Remove loading class from submit button\n            submitBtn.classList.remove(loadingClass);\n\n            var action,\n                xhr = event.target,\n                response = JSON.parse(xhr.responseText),\n                actions = response.actions ? response.actions : {};\n\n            if (xhr.status >= 200 && xhr.status < 300) {\n                // Remove form fields value\n                if (response.reset_form) {\n                    form.reset();\n                }\n\n                for (action in actions) {\n                    if (actions.hasOwnProperty(action)) {\n                        // Get success message and print on success div\n                        if ('success_message' === action) {\n                            dcfSuccess.innerHTML = '<p>' + actions[action] + '</p>';\n                        }\n                        if ('redirect' === action && isURL(actions[action])) {\n                            setTimeout(function (url) {\n                                window.location.href = url;\n                            }, 1000, actions[action]);\n                        }\n                    }\n                }\n            } else {\n                showServerError(form, response);\n            }\n        });\n\n        // Set up our request\n        request.open(\"POST\", settings.ajaxurl, true);\n\n        // The data sent is what the user provided in the form\n        request.send(formData);\n    };\n\n    /**\n     * Listen to all events\n     */\n    document.addEventListener('blur', blurHandler, true);\n    document.addEventListener('click', clickHandler, true);\n    document.addEventListener('submit', submitHandler, false);\n})();\n\n\n// WEBPACK FOOTER //\n// ./assets/js/public/form.js","(function () {\n    'use strict';\n\n    var target,\n        modal,\n        modals = document.querySelectorAll('[data-toggle=\"modal\"]'),\n        dismiss = document.querySelectorAll('[data-dismiss=\"modal\"]');\n\n    Array.prototype.forEach.call(modals, function (el, i) {\n        el.addEventListener('click', function (event) {\n            event.preventDefault();\n            target = el.getAttribute('data-target');\n            modal = document.querySelector(target);\n            if (!!modal) {\n                modal.classList.add('is-active');\n            }\n        });\n    });\n\n    Array.prototype.forEach.call(dismiss, function (el, i) {\n        el.addEventListener('click', function (event) {\n            event.preventDefault();\n            var closestModal = el.closest('.modal');\n            if (!!closestModal) {\n                closestModal.classList.remove('is-active');\n            }\n        });\n    });\n})();\n\n\n// WEBPACK FOOTER //\n// ./assets/js/public/modal.js"],"sourceRoot":""}