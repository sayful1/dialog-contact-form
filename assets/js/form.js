webpackJsonp([1],{

/***/ 23:
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(24);
module.exports = __webpack_require__(25);


/***/ }),

/***/ 24:
/***/ (function(module, exports) {

eval("var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * Element.classList.add();\n */\n(function () {\n    'use strict';\n\n    var settings = window.DialogContactForm || {\n        ajaxurl: '/wp-admin/admin-ajax.php',\n        nonce: '',\n        // Classes and Selectors\n        selector: '.dcf-form',\n        fieldClass: '.dcf-has-error',\n        errorClass: '.dcf-error-message',\n        loadingClass: '.is-loading',\n        submitBtnClass: '.dcf-submit',\n\n        // Messages\n        invalid_required: 'Please fill out this field.',\n        required_select: 'Please select a value.',\n        required_select_multi: 'Please select at least one value.',\n        required_checkbox: 'Please check this field.',\n        invalid_email: 'Please enter an email address.',\n        invalid_url: 'Please enter a URL.',\n        invalid_too_short: 'Please lengthen this text to {minLength} characters or more. ' + 'You are currently using {length} characters.',\n        invalid_too_long: 'Please shorten this text to no more than {maxLength} characters. ' + 'You are currently using {length} characters.',\n        pattern_mismatch: 'Please match the requested format.',\n        bad_input: 'Please enter a number.',\n        step_mismatch: 'Please select a valid value.',\n        number_too_large: 'Please select a value that is no more than {max}.',\n        number_too_small: 'Please select a value that is no less than {min}.',\n        generic_error: 'The value you entered for this field is invalid.'\n    };\n\n    if (!Element.prototype.matches) {\n        Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n    }\n\n    /**\n     * Polyfill for browsers that do not support Element.closest(), but\n     * carry support for element.matches() (or a prefixed equivalent, meaning IE9+)\n     */\n    if (!Element.prototype.closest) {\n        Element.prototype.closest = function (s) {\n            var el = this;\n            if (!document.documentElement.contains(el)) return null;\n            do {\n                if (el.matches(s)) return el;\n                el = el.parentElement;\n            } while (el !== null);\n            return null;\n        };\n    }\n\n    var getClassName = function getClassName(className) {\n        return className.replace('.', '').replace('#', '');\n    };\n\n    /**\n     * Validate the field\n     * @param field\n     * @returns {string}\n     */\n    var hasError = function hasError(field) {\n\n        // Merge user options with existing settings or defaults\n        var localSettings = settings;\n\n        // Don't validate file and disabled fields\n        if (field.disabled || field.type === 'file') return;\n\n        // Don't validate submits, buttons and reset inputs fields\n        if (field.type === 'reset' || field.type === 'submit' || field.type === 'button') return;\n\n        // Get validity\n        var validity = field.validity;\n\n        // If valid, return null\n        if (validity.valid) return;\n\n        // If field is required and empty\n        // if (validity.valueMissing) return 'Please fill out this field.';\n        if (validity.valueMissing) {\n            if (field.type === 'select-multiple') return localSettings.required_select_multi;\n            if (field.type === 'select-one') return localSettings.required_select;\n            if (field.type === 'radio') return localSettings.required_select;\n            if (field.type === 'checkbox') return localSettings.required_checkbox;\n            return localSettings.invalid_required;\n        }\n\n        // If not the right type\n        if (validity.typeMismatch) {\n\n            // Email\n            if (field.type === 'email') return localSettings.invalid_email;\n\n            // URL\n            if (field.type === 'url') return localSettings.invalid_url;\n        }\n\n        // If too short\n        if (validity.tooShort) return localSettings.invalid_too_short.replace('{minLength}', field.getAttribute('minLength')).replace('{length}', field.value.length);\n\n        // If too long\n        if (validity.tooLong) return localSettings.invalid_too_long.replace('{minLength}', field.getAttribute('maxLength')).replace('{length}', field.value.length);\n\n        // If number input isn't a number\n        if (validity.badInput) return localSettings.bad_input;\n\n        // If a number value doesn't match the step interval\n        if (validity.stepMismatch) return localSettings.step_mismatch;\n\n        // If a number field is over the max\n        if (validity.rangeOverflow) return localSettings.number_too_large.replace('{max}', field.getAttribute('max'));\n\n        // If a number field is below the min\n        if (validity.rangeUnderflow) return localSettings.number_too_small.replace('{min}', field.getAttribute('min'));\n\n        // If pattern doesn't match\n        if (validity.patternMismatch) {\n\n            // If pattern info is included, return custom error\n            if (field.hasAttribute('title')) return field.getAttribute('title');\n\n            // Otherwise, generic error\n            return localSettings.pattern_mismatch;\n        }\n\n        // If all else fails, return a generic catchall error\n        return localSettings.generic_error;\n    };\n\n    /**\n     * Show an error message\n     *\n     * @param field\n     * @param error\n     */\n    var showError = function showError(field, error) {\n\n        // Merge user options with existing settings or defaults\n        var localSettings = settings,\n            fieldClass = getClassName(localSettings.fieldClass),\n            errorClass = getClassName(localSettings.errorClass);\n\n        // Add error class to field\n        field.classList.add(fieldClass);\n\n        // If the field is a radio button and part of a group, error all and get the last item in the group\n        if ((field.type === 'radio' || field.type === 'checkbox') && field.name) {\n            var group = document.getElementsByName(field.name);\n            if (group.length > 0) {\n                for (var i = 0; i < group.length; i++) {\n                    // Only check fields in current form\n                    if (group[i].form !== field.form) continue;\n                    group[i].classList.add(fieldClass);\n                }\n                field = group[group.length - 1];\n            }\n        }\n\n        // Get field id or name\n        var id = field.id || field.name;\n        if (!id) return;\n\n        // Check if error message field already exists\n        // If not, create one\n        var message = field.form.querySelector('.' + errorClass + '#error-for-' + id);\n        if (!message) {\n            message = document.createElement('div');\n            message.className = errorClass;\n            message.id = 'error-for-' + id;\n\n            // If the field is a radio button or checkbox, insert error after the label\n            var label;\n            if (field.type === 'radio' || field.type === 'checkbox') {\n                label = field.form.querySelector('label[for=\"' + id + '\"]') || field.parentNode;\n                if (label) {\n                    label.parentNode.insertBefore(message, label.nextSibling);\n                }\n            }\n\n            // Otherwise, insert it after the field\n            if (!label) {\n                field.parentNode.insertBefore(message, field.nextSibling);\n            }\n        }\n\n        // Add ARIA role to the field\n        field.setAttribute('aria-describedby', 'error-for-' + id);\n\n        // Update error message\n        message.innerHTML = error;\n\n        // Show error message\n        message.style.display = 'block';\n        message.style.visibility = 'visible';\n    };\n\n    /**\n     * Remove the error message\n     *\n     * @param field\n     */\n    var removeError = function removeError(field) {\n\n        // Merge user options with existing settings or defaults\n        var localSettings = settings,\n            fieldClass = getClassName(localSettings.fieldClass),\n            errorClass = getClassName(localSettings.errorClass);\n\n        // Remove error class to field\n        field.classList.remove(fieldClass);\n\n        // Remove ARIA role from the field\n        field.removeAttribute('aria-describedby');\n\n        // If the field is a radio button and part of a group, remove error from all and get the last item in the group\n        if ((field.type === 'radio' || field.type === 'checkbox') && field.name) {\n            var group = document.getElementsByName(field.name);\n            if (group.length > 0) {\n                for (var i = 0; i < group.length; i++) {\n                    // Only check fields in current form\n                    if (group[i].form !== field.form) continue;\n                    group[i].classList.remove(fieldClass);\n                }\n                field = group[group.length - 1];\n            }\n        }\n\n        // Get field id or name\n        var id = field.id || field.name;\n        if (!id) return;\n\n        // Check if an error message is in the DOM\n        var message = field.form.querySelector('.' + errorClass + '#error-for-' + id + '');\n        if (!message) return;\n\n        // If so, hide it\n        message.innerHTML = '';\n        message.style.display = 'none';\n        message.style.visibility = 'hidden';\n    };\n\n    /**\n     * Check field validity when it loses focus\n     * @private\n     * @param  {Event} event The blur event\n     */\n    var blurHandler = function blurHandler(event) {\n\n        // Only run if the field is in a form to be validated\n        if (!event.target.form || !event.target.form.classList.contains(getClassName(settings.selector))) return;\n\n        // Validate the field\n        var error = hasError(event.target);\n\n        // If there's an error, show it\n        if (error) {\n            showError(event.target, error);\n            return;\n        }\n\n        // Otherwise, remove any existing error message\n        removeError(event.target);\n    };\n\n    /**\n     * Check radio and checkbox field validity when clicked\n     * @private\n     * @param  {Event} event The click event\n     */\n    var clickHandler = function clickHandler(event) {\n\n        // Only run if the field is in a form to be validated\n        if (!event.target.form || !event.target.form.classList.contains(getClassName(settings.selector))) return;\n\n        // Only run if the field is a checkbox or radio\n        var type = event.target.getAttribute('type');\n        if (!(type === 'checkbox' || type === 'radio')) return;\n\n        // Validate the field\n        var error = hasError(event.target);\n\n        // If there's an error, show it\n        if (error) {\n            showError(event.target, error);\n            return;\n        }\n\n        // Otherwise, remove any errors that exist\n        removeError(event.target);\n    };\n\n    var showServerError = function showServerError(form, errors) {\n        var vMessages, field_name, fields, control, messages, error;\n\n        // Get error message and print on error div\n        if (errors.message) {\n            form.querySelector('.dcf-error').innerHTML = '<p>' + errors.message + '</p>';\n        }\n\n        // Loop through all fields and print field error message if any\n        vMessages = errors.validation && _typeof(errors.validation) === 'object' ? errors.validation : {};\n        for (field_name in vMessages) {\n            if (vMessages.hasOwnProperty(field_name)) {\n                fields = form.querySelector('[name=\"' + field_name + '\"]');\n                if (!fields) {\n                    fields = form.querySelector('[name=\"' + field_name + '[]\"]');\n                }\n                control = fields.closest('.dcf-control');\n                messages = vMessages[field_name];\n                if (messages[0]) {\n                    fields.classList.add(getClassName(settings.fieldClass));\n                    error = '<div class=\"' + getClassName(settings.errorClass) + '\">' + messages[0] + '</div>';\n                    control.insertAdjacentHTML('beforeend', error);\n                }\n            }\n        }\n    };\n\n    var removeAllErrors = function removeAllErrors(form) {\n        // Hide success message if any\n        form.querySelector('.dcf-success').innerHTML = '';\n        // Hide error message if any\n        form.querySelector('.dcf-error').innerHTML = '';\n\n        // Hide field help message if any\n        var helpText = form.querySelectorAll('.' + getClassName(settings.errorClass));\n        for (var i = 0; i < helpText.length; i++) {\n            helpText[i].parentNode.removeChild(helpText[i]);\n        }\n\n        // Remove field validation border-color if any\n        var allFields = form.querySelectorAll('.input, .textarea, .select select');\n        for (i = 0; i < allFields.length; i++) {\n            allFields[i].classList.remove(getClassName(settings.fieldClass));\n        }\n    };\n\n    var isURL = function isURL(str) {\n        var pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\n        '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.?)+[a-z]{2,}|' + // domain name\n        '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n        '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n        '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n        '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\n        return pattern.test(str);\n    };\n\n    /**\n     * Check all fields on submit\n     * @private\n     * @param  {Event} event  The submit event\n     */\n    var submitHandler = function submitHandler(event) {\n        'use strict';\n\n        // Only run on forms flagged for validation\n\n        if (!event.target.classList.contains(getClassName(settings.selector))) return;\n\n        // Prevent form from submitting if there are errors or submission is disabled\n        event.preventDefault();\n\n        // Get all of the form elements\n        var fields = event.target.elements;\n\n        // Validate each field\n        // Store the first field with an error to a variable so we can bring it into focus later\n        var hasErrors;\n        for (var i = 0; i < fields.length; i++) {\n            var error = hasError(fields[i]);\n            if (error) {\n                showError(fields[i], error);\n                if (!hasErrors) {\n                    hasErrors = fields[i];\n                }\n            }\n        }\n\n        // If there are errors, focus on first element with error\n        if (hasErrors) {\n            hasErrors.focus();\n            return;\n        }\n\n        var form = event.target,\n            dcfSuccess = form.querySelector('.dcf-success'),\n            submitBtn = form.querySelector('.' + getClassName(settings.submitBtnClass)),\n            loadingClass = getClassName(settings.loadingClass);\n\n        // Add loading class to submit button\n        submitBtn.classList.add(loadingClass);\n\n        removeAllErrors(form);\n\n        // Get form fields data\n        var formData = new FormData(form);\n        // Add action params with form data\n        formData.append('action', 'dcf_submit_form');\n        // Add nonce field with form data\n        // formData.append('_dcf_nonce', settings.nonce);\n\n        var request = new XMLHttpRequest();\n\n        // Define what happens on successful data submission\n        request.addEventListener(\"load\", function (event) {\n            // Remove loading class from submit button\n            submitBtn.classList.remove(loadingClass);\n\n            var action,\n                xhr = event.target,\n                response = JSON.parse(xhr.responseText),\n                actions = response.actions ? response.actions : {};\n\n            if (xhr.status >= 200 && xhr.status < 300) {\n                // Remove form fields value\n                if (response.reset_form) {\n                    form.reset();\n                }\n\n                for (action in actions) {\n                    if (actions.hasOwnProperty(action)) {\n                        // Get success message and print on success div\n                        if ('success_message' === action) {\n                            dcfSuccess.innerHTML = '<p>' + actions[action] + '</p>';\n                        }\n                        if ('redirect' === action && isURL(actions[action])) {\n                            setTimeout(function (url) {\n                                window.location.href = url;\n                            }, 1000, actions[action]);\n                        }\n                    }\n                }\n            } else {\n                showServerError(form, response);\n            }\n        });\n\n        // Set up our request\n        request.open(\"POST\", settings.ajaxurl, true);\n\n        // The data sent is what the user provided in the form\n        request.send(formData);\n    };\n\n    /**\n     * Listen to all events\n     */\n    document.addEventListener('blur', blurHandler, true);\n    document.addEventListener('click', clickHandler, true);\n    document.addEventListener('submit', submitHandler, false);\n})();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n");

/***/ }),

/***/ 25:
/***/ (function(module, exports) {

eval("(function () {\n    'use strict';\n\n    var target,\n        modal,\n        modals = document.querySelectorAll('[data-toggle=\"modal\"]'),\n        dismiss = document.querySelectorAll('[data-dismiss=\"modal\"]');\n\n    Array.prototype.forEach.call(modals, function (el, i) {\n        el.addEventListener('click', function (event) {\n            event.preventDefault();\n            target = el.getAttribute('data-target');\n            modal = document.querySelector(target);\n            if (!!modal) {\n                modal.classList.add('is-active');\n            }\n        });\n    });\n\n    Array.prototype.forEach.call(dismiss, function (el, i) {\n        el.addEventListener('click', function (event) {\n            event.preventDefault();\n            var closestModal = el.closest('.modal');\n            if (!!closestModal) {\n                closestModal.classList.remove('is-active');\n            }\n        });\n    });\n})();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvcHVibGljL21vZGFsLmpzPzVlYjciXSwibmFtZXMiOlsidGFyZ2V0IiwibW9kYWwiLCJtb2RhbHMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJkaXNtaXNzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJmb3JFYWNoIiwiY2FsbCIsImVsIiwiaSIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwiZ2V0QXR0cmlidXRlIiwicXVlcnlTZWxlY3RvciIsImNsYXNzTGlzdCIsImFkZCIsImNsb3Nlc3RNb2RhbCIsImNsb3Nlc3QiLCJyZW1vdmUiXSwibWFwcGluZ3MiOiJBQUFBLENBQUMsWUFBWTtBQUNUOztBQUVBLFFBQUlBLE1BQUo7QUFBQSxRQUNJQyxLQURKO0FBQUEsUUFFSUMsU0FBU0MsU0FBU0MsZ0JBQVQsQ0FBMEIsdUJBQTFCLENBRmI7QUFBQSxRQUdJQyxVQUFVRixTQUFTQyxnQkFBVCxDQUEwQix3QkFBMUIsQ0FIZDs7QUFLQUUsVUFBTUMsU0FBTixDQUFnQkMsT0FBaEIsQ0FBd0JDLElBQXhCLENBQTZCUCxNQUE3QixFQUFxQyxVQUFVUSxFQUFWLEVBQWNDLENBQWQsRUFBaUI7QUFDbERELFdBQUdFLGdCQUFILENBQW9CLE9BQXBCLEVBQTZCLFVBQVVDLEtBQVYsRUFBaUI7QUFDMUNBLGtCQUFNQyxjQUFOO0FBQ0FkLHFCQUFTVSxHQUFHSyxZQUFILENBQWdCLGFBQWhCLENBQVQ7QUFDQWQsb0JBQVFFLFNBQVNhLGFBQVQsQ0FBdUJoQixNQUF2QixDQUFSO0FBQ0EsZ0JBQUksQ0FBQyxDQUFDQyxLQUFOLEVBQWE7QUFDVEEsc0JBQU1nQixTQUFOLENBQWdCQyxHQUFoQixDQUFvQixXQUFwQjtBQUNIO0FBQ0osU0FQRDtBQVFILEtBVEQ7O0FBV0FaLFVBQU1DLFNBQU4sQ0FBZ0JDLE9BQWhCLENBQXdCQyxJQUF4QixDQUE2QkosT0FBN0IsRUFBc0MsVUFBVUssRUFBVixFQUFjQyxDQUFkLEVBQWlCO0FBQ25ERCxXQUFHRSxnQkFBSCxDQUFvQixPQUFwQixFQUE2QixVQUFVQyxLQUFWLEVBQWlCO0FBQzFDQSxrQkFBTUMsY0FBTjtBQUNBLGdCQUFJSyxlQUFlVCxHQUFHVSxPQUFILENBQVcsUUFBWCxDQUFuQjtBQUNBLGdCQUFJLENBQUMsQ0FBQ0QsWUFBTixFQUFvQjtBQUNoQkEsNkJBQWFGLFNBQWIsQ0FBdUJJLE1BQXZCLENBQThCLFdBQTlCO0FBQ0g7QUFDSixTQU5EO0FBT0gsS0FSRDtBQVNILENBNUJEIiwiZmlsZSI6IjI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgdGFyZ2V0LFxuICAgICAgICBtb2RhbCxcbiAgICAgICAgbW9kYWxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdG9nZ2xlPVwibW9kYWxcIl0nKSxcbiAgICAgICAgZGlzbWlzcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWRpc21pc3M9XCJtb2RhbFwiXScpO1xuXG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChtb2RhbHMsIGZ1bmN0aW9uIChlbCwgaSkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRhcmdldCA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS10YXJnZXQnKTtcbiAgICAgICAgICAgIG1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuICAgICAgICAgICAgaWYgKCEhbW9kYWwpIHtcbiAgICAgICAgICAgICAgICBtb2RhbC5jbGFzc0xpc3QuYWRkKCdpcy1hY3RpdmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGRpc21pc3MsIGZ1bmN0aW9uIChlbCwgaSkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHZhciBjbG9zZXN0TW9kYWwgPSBlbC5jbG9zZXN0KCcubW9kYWwnKTtcbiAgICAgICAgICAgIGlmICghIWNsb3Nlc3RNb2RhbCkge1xuICAgICAgICAgICAgICAgIGNsb3Nlc3RNb2RhbC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hY3RpdmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59KSgpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9qcy9wdWJsaWMvbW9kYWwuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///25\n");

/***/ })

},[23]);